PDDL (Planning Domain Definition Language) is a standardized language used to define and specify the planning domain for artificial intelligence (AI) planning systems. It was developed in the 1990s by researchers at Carnegie Mellon University.

In PDDL, a planning problem is represented as a set of three main components:

1. **Domain**: This specifies the actions that can be taken in the problem, including their preconditions and effects.
2. **Problem**: This specifies the initial state of the world and the goal to achieve.
3. **Initiation**: This specifies the initial state of the world.

The PDDL language provides a way to formally describe planning problems using a structured syntax that can be easily understood by AI planning systems. It is widely used in various applications, including robotics, logistics, manufacturing, and more.

A typical Pddl problem consists of:

* `define` statements that introduce variables, constants, and predicates (e.g., `?x`, `true`, `<>)`.
* **Action definitions**: These specify the actions that can be taken, including their preconditions (`precondition`) and effects (`effect`).
* **Initial state**: This specifies the initial state of the world.
* **Goal**: This specifies the desired final state.

For example, consider a simple Pddl problem:
```pddl
(define (domain my-domain)
  (:requirements :strips :typing)
  (:types block)
  (:predicates (holds ?x ?y) (:preconditions (and (block ?x) (not (holds ?x ?y))))
    (:effects (holds ?y)))
  )

(define (problem my-problem)
  (:domain my-domain)
  (:objects block1 block2)
  (:init (holds block1 block2))
  (:goal (holds block1 block3))
)
```
This PDDL problem defines a simple planning domain with two blocks, `block1` and `block2`. The initial state is such that `block1` holds of `block2`, and the goal is to achieve a situation where `block1` holds of `block3`.

PDDL has been widely adopted in AI research and has been used as a standard for formal planning languages.